//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Product = newProductTable("public", "product", "")

type productTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	ShopID            postgres.ColumnInteger
	Version           postgres.ColumnInteger
	ProductID         postgres.ColumnString
	Title             postgres.ColumnString
	Description       postgres.ColumnString
	URL               postgres.ColumnString
	ImgURL            postgres.ColumnString
	AdditionalImgUrls postgres.ColumnString
	Condition         postgres.ColumnString
	Availability      postgres.ColumnString
	Price             postgres.ColumnString
	Brand             postgres.ColumnString
	Gtin              postgres.ColumnString
	Mpn               postgres.ColumnString
	ProductCategory   postgres.ColumnString
	ProductType       postgres.ColumnString
	Color             postgres.ColumnString
	Size              postgres.ColumnString
	ItemGroupID       postgres.ColumnString
	Gender            postgres.ColumnString
	AgeGroup          postgres.ColumnString
	CreatedAt         postgres.ColumnTimestampz
	DeletedAt         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProductTable struct {
	productTable

	EXCLUDED productTable
}

// AS creates new ProductTable with assigned alias
func (a ProductTable) AS(alias string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductTable with assigned schema name
func (a ProductTable) FromSchema(schemaName string) *ProductTable {
	return newProductTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductTable with assigned table prefix
func (a ProductTable) WithPrefix(prefix string) *ProductTable {
	return newProductTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductTable with assigned table suffix
func (a ProductTable) WithSuffix(suffix string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductTable(schemaName, tableName, alias string) *ProductTable {
	return &ProductTable{
		productTable: newProductTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newProductTableImpl("", "excluded", ""),
	}
}

func newProductTableImpl(schemaName, tableName, alias string) productTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		ShopIDColumn            = postgres.IntegerColumn("shop_id")
		VersionColumn           = postgres.IntegerColumn("version")
		ProductIDColumn         = postgres.StringColumn("product_id")
		TitleColumn             = postgres.StringColumn("title")
		DescriptionColumn       = postgres.StringColumn("description")
		URLColumn               = postgres.StringColumn("url")
		ImgURLColumn            = postgres.StringColumn("img_url")
		AdditionalImgUrlsColumn = postgres.StringColumn("additional_img_urls")
		ConditionColumn         = postgres.StringColumn("condition")
		AvailabilityColumn      = postgres.StringColumn("availability")
		PriceColumn             = postgres.StringColumn("price")
		BrandColumn             = postgres.StringColumn("brand")
		GtinColumn              = postgres.StringColumn("gtin")
		MpnColumn               = postgres.StringColumn("mpn")
		ProductCategoryColumn   = postgres.StringColumn("product_category")
		ProductTypeColumn       = postgres.StringColumn("product_type")
		ColorColumn             = postgres.StringColumn("color")
		SizeColumn              = postgres.StringColumn("size")
		ItemGroupIDColumn       = postgres.StringColumn("item_group_id")
		GenderColumn            = postgres.StringColumn("gender")
		AgeGroupColumn          = postgres.StringColumn("age_group")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		DeletedAtColumn         = postgres.TimestampzColumn("deleted_at")
		allColumns              = postgres.ColumnList{IDColumn, ShopIDColumn, VersionColumn, ProductIDColumn, TitleColumn, DescriptionColumn, URLColumn, ImgURLColumn, AdditionalImgUrlsColumn, ConditionColumn, AvailabilityColumn, PriceColumn, BrandColumn, GtinColumn, MpnColumn, ProductCategoryColumn, ProductTypeColumn, ColorColumn, SizeColumn, ItemGroupIDColumn, GenderColumn, AgeGroupColumn, CreatedAtColumn, DeletedAtColumn}
		mutableColumns          = postgres.ColumnList{ShopIDColumn, VersionColumn, ProductIDColumn, TitleColumn, DescriptionColumn, URLColumn, ImgURLColumn, AdditionalImgUrlsColumn, ConditionColumn, AvailabilityColumn, PriceColumn, BrandColumn, GtinColumn, MpnColumn, ProductCategoryColumn, ProductTypeColumn, ColorColumn, SizeColumn, ItemGroupIDColumn, GenderColumn, AgeGroupColumn, CreatedAtColumn, DeletedAtColumn}
	)

	return productTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		ShopID:            ShopIDColumn,
		Version:           VersionColumn,
		ProductID:         ProductIDColumn,
		Title:             TitleColumn,
		Description:       DescriptionColumn,
		URL:               URLColumn,
		ImgURL:            ImgURLColumn,
		AdditionalImgUrls: AdditionalImgUrlsColumn,
		Condition:         ConditionColumn,
		Availability:      AvailabilityColumn,
		Price:             PriceColumn,
		Brand:             BrandColumn,
		Gtin:              GtinColumn,
		Mpn:               MpnColumn,
		ProductCategory:   ProductCategoryColumn,
		ProductType:       ProductTypeColumn,
		Color:             ColorColumn,
		Size:              SizeColumn,
		ItemGroupID:       ItemGroupIDColumn,
		Gender:            GenderColumn,
		AgeGroup:          AgeGroupColumn,
		CreatedAt:         CreatedAtColumn,
		DeletedAt:         DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
