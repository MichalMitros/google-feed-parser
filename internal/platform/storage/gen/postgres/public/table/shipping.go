//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Shipping = newShippingTable("public", "shipping", "")

type shippingTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	ProductID postgres.ColumnInteger
	Country   postgres.ColumnString
	Service   postgres.ColumnString
	Price     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ShippingTable struct {
	shippingTable

	EXCLUDED shippingTable
}

// AS creates new ShippingTable with assigned alias
func (a ShippingTable) AS(alias string) *ShippingTable {
	return newShippingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShippingTable with assigned schema name
func (a ShippingTable) FromSchema(schemaName string) *ShippingTable {
	return newShippingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShippingTable with assigned table prefix
func (a ShippingTable) WithPrefix(prefix string) *ShippingTable {
	return newShippingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShippingTable with assigned table suffix
func (a ShippingTable) WithSuffix(suffix string) *ShippingTable {
	return newShippingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShippingTable(schemaName, tableName, alias string) *ShippingTable {
	return &ShippingTable{
		shippingTable: newShippingTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newShippingTableImpl("", "excluded", ""),
	}
}

func newShippingTableImpl(schemaName, tableName, alias string) shippingTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ProductIDColumn = postgres.IntegerColumn("product_id")
		CountryColumn   = postgres.StringColumn("country")
		ServiceColumn   = postgres.StringColumn("service")
		PriceColumn     = postgres.StringColumn("price")
		allColumns      = postgres.ColumnList{IDColumn, ProductIDColumn, CountryColumn, ServiceColumn, PriceColumn}
		mutableColumns  = postgres.ColumnList{ProductIDColumn, CountryColumn, ServiceColumn, PriceColumn}
	)

	return shippingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ProductID: ProductIDColumn,
		Country:   CountryColumn,
		Service:   ServiceColumn,
		Price:     PriceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
