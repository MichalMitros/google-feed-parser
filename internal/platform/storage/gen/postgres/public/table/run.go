//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Run = newRunTable("public", "run", "")

type runTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	ShopID          postgres.ColumnInteger
	ProductsVersion postgres.ColumnInteger
	CreatedProducts postgres.ColumnInteger
	UpdatedProducts postgres.ColumnInteger
	DeletedProducts postgres.ColumnInteger
	FailedProducts  postgres.ColumnInteger
	Success         postgres.ColumnBool
	StatusMessage   postgres.ColumnString
	CreatedAt       postgres.ColumnTimestampz
	FinishedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RunTable struct {
	runTable

	EXCLUDED runTable
}

// AS creates new RunTable with assigned alias
func (a RunTable) AS(alias string) *RunTable {
	return newRunTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RunTable with assigned schema name
func (a RunTable) FromSchema(schemaName string) *RunTable {
	return newRunTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RunTable with assigned table prefix
func (a RunTable) WithPrefix(prefix string) *RunTable {
	return newRunTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RunTable with assigned table suffix
func (a RunTable) WithSuffix(suffix string) *RunTable {
	return newRunTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRunTable(schemaName, tableName, alias string) *RunTable {
	return &RunTable{
		runTable: newRunTableImpl(schemaName, tableName, alias),
		EXCLUDED: newRunTableImpl("", "excluded", ""),
	}
}

func newRunTableImpl(schemaName, tableName, alias string) runTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		ShopIDColumn          = postgres.IntegerColumn("shop_id")
		ProductsVersionColumn = postgres.IntegerColumn("products_version")
		CreatedProductsColumn = postgres.IntegerColumn("created_products")
		UpdatedProductsColumn = postgres.IntegerColumn("updated_products")
		DeletedProductsColumn = postgres.IntegerColumn("deleted_products")
		FailedProductsColumn  = postgres.IntegerColumn("failed_products")
		SuccessColumn         = postgres.BoolColumn("success")
		StatusMessageColumn   = postgres.StringColumn("status_message")
		CreatedAtColumn       = postgres.TimestampzColumn("created_at")
		FinishedAtColumn      = postgres.TimestampzColumn("finished_at")
		allColumns            = postgres.ColumnList{IDColumn, ShopIDColumn, ProductsVersionColumn, CreatedProductsColumn, UpdatedProductsColumn, DeletedProductsColumn, FailedProductsColumn, SuccessColumn, StatusMessageColumn, CreatedAtColumn, FinishedAtColumn}
		mutableColumns        = postgres.ColumnList{ShopIDColumn, ProductsVersionColumn, CreatedProductsColumn, UpdatedProductsColumn, DeletedProductsColumn, FailedProductsColumn, SuccessColumn, StatusMessageColumn, CreatedAtColumn, FinishedAtColumn}
	)

	return runTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		ShopID:          ShopIDColumn,
		ProductsVersion: ProductsVersionColumn,
		CreatedProducts: CreatedProductsColumn,
		UpdatedProducts: UpdatedProductsColumn,
		DeletedProducts: DeletedProductsColumn,
		FailedProducts:  FailedProductsColumn,
		Success:         SuccessColumn,
		StatusMessage:   StatusMessageColumn,
		CreatedAt:       CreatedAtColumn,
		FinishedAt:      FinishedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
