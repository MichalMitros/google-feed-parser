// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RabbitMQPublisher is an autogenerated mock type for the RabbitMQPublisher type
type RabbitMQPublisher struct {
	mock.Mock
}

// Publish provides a mock function with given fields: _a0, _a1, _a2
func (_m *RabbitMQPublisher) Publish(_a0 context.Context, _a1 string, _a2 []byte) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRabbitMQPublisher creates a new instance of RabbitMQPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRabbitMQPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *RabbitMQPublisher {
	mock := &RabbitMQPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
